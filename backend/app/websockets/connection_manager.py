# app/websockets/table_sync_manager.py
from fastapi import WebSocket
from typing import Dict, Set, List, Optional
import json
from datetime import datetime
import logging
import asyncio

logger = logging.getLogger(__name__)

class TableSyncManager:
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
    """
    
    def __init__(self):
        # {user_id: WebSocket} - –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.active_connections: Dict[str, WebSocket] = {}
        
        # {table_id: Set[user_id]} - –∫—Ç–æ –Ω–∞ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ
        self.table_subscriptions: Dict[str, Set[str]] = {}
        
        # {table_id: {cell: user_id}} - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —è—á–µ–µ–∫
        self.cell_locks: Dict[str, Dict[str, str]] = {}
        
        # {table_id: {user_id: cursor_data}} - –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–æ–≤
        self.user_cursors: Dict[str, Dict[str, dict]] = {}

    async def connect_to_table(self, websocket: WebSocket, user_id: str, table_id: str):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
        await websocket.accept()
        self.active_connections[user_id] = websocket
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
        if table_id not in self.table_subscriptions:
            self.table_subscriptions[table_id] = set()
            self.cell_locks[table_id] = {}
            self.user_cursors[table_id] = {}
            
        self.table_subscriptions[table_id].add(user_id)
        
        logger.info(f"User {user_id} connected to table {table_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await self._broadcast_to_table(table_id, {
            "type": "user_joined",
            "user_id": user_id,
            "table_id": table_id,
            "timestamp": datetime.now().isoformat(),
            "active_users": list(self.table_subscriptions[table_id])
        }, exclude_user=user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self._send_to_user(user_id, {
            "type": "table_state",
            "table_id": table_id,
            "active_users": list(self.table_subscriptions[table_id]),
            "locked_cells": self.cell_locks[table_id],
            "user_cursors": self.user_cursors[table_id]
        })

    def disconnect(self, user_id: str):
        """–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        if user_id not in self.active_connections:
            return
            
        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        tables_to_cleanup = []
        for table_id, users in self.table_subscriptions.items():
            if user_id in users:
                users.remove(user_id)
                tables_to_cleanup.append(table_id)
                
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
                cells_to_unlock = []
                for cell, locked_by in self.cell_locks.get(table_id, {}).items():
                    if locked_by == user_id:
                        cells_to_unlock.append(cell)
                
                for cell in cells_to_unlock:
                    del self.cell_locks[table_id][cell]
                
                # –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å–æ—Ä
                if table_id in self.user_cursors and user_id in self.user_cursors[table_id]:
                    del self.user_cursors[table_id][user_id]
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        del self.active_connections[user_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        for table_id in tables_to_cleanup:
            asyncio.create_task(self._notify_user_left(table_id, user_id))
        
        logger.info(f"User {user_id} disconnected")

    async def _notify_user_left(self, table_id: str, user_id: str):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._broadcast_to_table(table_id, {
            "type": "user_left",
            "user_id": user_id,
            "table_id": table_id,
            "timestamp": datetime.now().isoformat(),
            "active_users": list(self.table_subscriptions.get(table_id, []))
        })

    # üéØ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¢–ê–ë–õ–ò–¶

    async def sync_cell_update(self, table_id: str, user_id: str, cell_data: dict) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–∞–±–ª–∏—Ü–µ
        if not self._is_user_subscribed(table_id, user_id):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if not self._is_cell_editable(table_id, cell_data["cell"], user_id):
            await self._send_to_user(user_id, {
                "type": "cell_lock_error",
                "cell": cell_data["cell"],
                "message": "–Ø—á–µ–π–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            })
            return False
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã
        await self._broadcast_to_table(table_id, {
            "type": "cell_updated",
            "table_id": table_id,
            "cell": cell_data["cell"],
            "value": cell_data["value"],
            "formula": cell_data.get("formula"),
            "user_id": user_id,
            "timestamp": datetime.now().isoformat()
        })
        
        logger.info(f"Cell {cell_data['cell']} updated by {user_id} in table {table_id}")
        return True

    async def sync_cell_lock(self, table_id: str, user_id: str, cell: str, lock: bool) -> bool:
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self._is_user_subscribed(table_id, user_id):
            return False
            
        if lock:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            if self._is_cell_editable(table_id, cell, user_id):
                self.cell_locks[table_id][cell] = user_id
                await self._broadcast_to_table(table_id, {
                    "type": "cell_locked",
                    "table_id": table_id,
                    "cell": cell,
                    "user_id": user_id,
                    "timestamp": datetime.now().isoformat()
                })
                return True
            else:
                return False
        else:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            if (table_id in self.cell_locks and 
                cell in self.cell_locks[table_id] and 
                self.cell_locks[table_id][cell] == user_id):
                
                del self.cell_locks[table_id][cell]
                await self._broadcast_to_table(table_id, {
                    "type": "cell_unlocked",
                    "table_id": table_id,
                    "cell": cell,
                    "user_id": user_id,
                    "timestamp": datetime.now().isoformat()
                })
                return True
        return False

    async def sync_cursor_move(self, table_id: str, user_id: str, cursor_data: dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞"""
        if not self._is_user_subscribed(table_id, user_id):
            return
            
        self.user_cursors[table_id][user_id] = {
            **cursor_data,
            "last_updated": datetime.now().isoformat()
        }
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        await self._broadcast_to_table(table_id, {
            "type": "cursor_moved",
            "table_id": table_id,
            "user_id": user_id,
            "cursor": cursor_data,
            "timestamp": datetime.now().isoformat()
        }, exclude_user=user_id)

    # üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

    def _is_user_subscribed(self, table_id: str, user_id: str) -> bool:
        """–ü–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ç–∞–±–ª–∏—Ü—É?"""
        return (table_id in self.table_subscriptions and 
                user_id in self.table_subscriptions[table_id])

    def _is_cell_editable(self, table_id: str, cell: str, user_id: str) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É?"""
        if table_id not in self.cell_locks:
            return True
            
        current_locker = self.cell_locks[table_id].get(cell)
        return current_locker is None or current_locker == user_id

    async def _broadcast_to_table(self, table_id: str, message: dict, exclude_user: Optional[str] = None):
        """–†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã"""
        if table_id not in self.table_subscriptions:
            return
        
        disconnected_users = []
        
        for user_id in list(self.table_subscriptions[table_id]):  # –∫–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            if user_id == exclude_user:
                continue
                
            if user_id in self.active_connections:
                try:
                    await self.active_connections[user_id].send_json(message)
                except Exception as e:
                    logger.error(f"Error sending to {user_id}: {e}")
                    disconnected_users.append(user_id)
        
        # –ß–∏—Å—Ç–∏–º –æ—Ç–∫–ª—é—á–∏–≤—à–∏—Ö—Å—è
        for user_id in disconnected_users:
            self.disconnect(user_id)

    async def _send_to_user(self, user_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id in self.active_connections:
            try:
                await self.active_connections[user_id].send_json(message)
            except Exception as e:
                logger.error(f"Error sending to {user_id}: {e}")
                self.disconnect(user_id)

    # üìä –ú–ï–¢–û–î–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê

    def get_table_stats(self, table_id: str) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ"""
        if table_id not in self.table_subscriptions:
            return {"error": "Table not found"}
            
        return {
            "table_id": table_id,
            "active_users": list(self.table_subscriptions[table_id]),
            "locked_cells": self.cell_locks.get(table_id, {}),
            "user_cursors": self.user_cursors.get(table_id, {}),
            "total_connections": len(self.active_connections)
        }

    def get_user_tables(self, user_id: str) -> List[str]:
        """–ù–∞ –∫–∞–∫–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö —Å–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return [
            table_id for table_id, users in self.table_subscriptions.items()
            if user_id in users
        ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
table_sync_manager = TableSyncManager()