# test_models.py
import sys

import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –º–æ–¥—É–ª–µ–π
from sqlalchemy import create_engine, Column, Integer, String, Text, Boolean, DateTime, ForeignKey, JSON
from sqlalchemy.orm import sessionmaker, declarative_base, relationship, joinedload
from sqlalchemy.sql import func

from models import User, TableColumn,TableRecord,TableTemplate

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# =============================================================================
# –ú–û–î–ï–õ–ò (–∫–æ–ø–∏—Ä—É–µ–º –≤–∞—à–∏ –º–æ–¥–µ–ª–∏ –ø—Ä—è–º–æ –≤ —Ñ–∞–π–ª)
# =============================================================================

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String(255), unique=True, index=True, nullable=False)
    password_hash = Column(String(255), nullable=False)
    name = Column(String(100))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    created_templates = relationship("TableTemplate", back_populates="creator")
    created_records = relationship("TableRecord", foreign_keys="TableRecord.created_by", back_populates="creator_user")
    updated_records = relationship("TableRecord", foreign_keys="TableRecord.updated_by", back_populates="updater_user")

class TableTemplate(Base):
    __tablename__ = "table_templates"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), nullable=False)
    created_by = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    creator = relationship("User", back_populates="created_templates")
    columns = relationship("TableColumn", back_populates="table_template", cascade="all, delete-orphan")
    records = relationship("TableRecord", back_populates="table_template", cascade="all, delete-orphan")

class TableColumn(Base):
    __tablename__ = "table_columns"

    id = Column(Integer, primary_key=True, index=True)
    table_template_id = Column(Integer, ForeignKey("table_templates.id"), nullable=False)
    name = Column(String(255), nullable=False)
    column_key = Column(String(100), nullable=False)
    data_type = Column(String(50), nullable=False)
    is_required = Column(Boolean, default=False)
    is_unique = Column(Boolean, default=False)
    order_index = Column(Integer, default=0)
    config = Column(JSON, default=dict)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    table_template = relationship("TableTemplate", back_populates="columns")

class TableRecord(Base):
    __tablename__ = "table_records"

    id = Column(Integer, primary_key=True, index=True)
    table_template_id = Column(Integer, ForeignKey("table_templates.id"), nullable=False)
    data = Column(JSON, nullable=False, default=dict)
    created_by = Column(Integer, ForeignKey("users.id"))
    updated_by = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    version = Column(Integer, default=1)
    
    # Relationships
    table_template = relationship("TableTemplate", back_populates="records")
    creator_user = relationship("User", foreign_keys=[created_by], back_populates="created_records")
    updater_user = relationship("User", foreign_keys=[updated_by], back_populates="updated_records")

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =============================================================================

# –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

def clear_db():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    Base.metadata.drop_all(bind=engine)
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

# =============================================================================
# –¢–ï–°–¢–´
# =============================================================================

def test_basic_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    db = SessionLocal()
    
    try:
        # 1. –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–•
        print("\n1. –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        print("-" * 30)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1 = User(
            email="admin@company.com",
            password_hash="hash123",
            name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã"
        )
        
        user2 = User(
            email="manager@company.com",
            password_hash="hash456", 
            name="–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤"
        )
        
        db.add_all([user1, user2])
        db.commit()
        db.refresh(user1)
        db.refresh(user2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user1.name}, {user2.name}")
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Ç–∞–±–ª–∏—Ü—ã
        template = TableTemplate(
            name="–ü—Ä–æ–µ–∫—Ç—ã",
            created_by=user1.id
        )
        db.add(template)
        db.commit()
        db.refresh(template)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: {template.name}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns = [
            TableColumn(
                table_template_id=template.id,
                name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                column_key="project_name",
                data_type="text",
                is_required=True,
                order_index=0
            ),
            TableColumn(
                table_template_id=template.id,
                name="–ë—é–¥–∂–µ—Ç",
                column_key="budget",
                data_type="number",
                order_index=1,
                config={"min": 0, "decimals": 2}
            ),
            TableColumn(
                table_template_id=template.id,
                name="–°—Ç–∞—Ç—É—Å",
                column_key="status", 
                data_type="select",
                order_index=2,
                config={"options": ["–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è", "–≤ —Ä–∞–±–æ—Ç–µ", "–∑–∞–≤–µ—Ä—à–µ–Ω"]}
            )
        ]
        
        db.add_all(columns)
        db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
        records = [
            TableRecord(
                table_template_id=template.id,
                data={
                    "project_name": "–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Ü–µ—Ö–∞",
                    "budget": 5000000,
                    "status": "–≤ —Ä–∞–±–æ—Ç–µ"
                },
                created_by=user1.id,
                updated_by=user1.id
            ),
            TableRecord(
                table_template_id=template.id,
                data={
                    "project_name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞Êñ∞‰∫ßÂìÅ",
                    "budget": 2500000,
                    "status": "–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è"
                },
                created_by=user2.id,
                updated_by=user2.id
            )
        ]
        
        db.add_all(records)
        db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã {len(records)} –∑–∞–ø–∏—Å–∏")
        
        # 2. –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–•
        print("\n2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–¢–ï–ù–ò–Ø –î–ê–ù–ù–´–•")
        print("-" * 30)
        
        # –ß–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        for user in users:
            print(f"   - {user.name} ({user.email})")
        
        # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        templates = db.query(TableTemplate).all()
        print(f"üìä –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
        
        # –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
        all_records = db.query(TableRecord).all()
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_records)}")
        for record in all_records:
            print(f"   - {record.data.get('project_name')} (–±—é–¥–∂–µ—Ç: {record.data.get('budget')})")
        
        # 3. –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•
        print("\n3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
        print("-" * 30)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        record_to_update = all_records[0]
        old_budget = record_to_update.data['budget']
        record_to_update.data['budget'] = 6000000
        record_to_update.updated_by = user2.id
        db.commit()
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {record_to_update.data['project_name']}")
        print(f"   –ë—é–¥–∂–µ—Ç –∏–∑–º–µ–Ω–µ–Ω: {old_budget} ‚Üí {record_to_update.data['budget']}")
        
        # 4. –£–î–ê–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•
        print("\n4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø")
        print("-" * 30)
        
        # –£–¥–∞–ª—è–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
        record_to_delete = all_records[1]
        db.delete(record_to_delete)
        db.commit()
        
        remaining_records = db.query(TableRecord).count()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å. –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {remaining_records}")
        
        print("\n‚úÖ –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –£–°–ü–ï–®–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
        import traceback
        traceback.print_exc()
    finally:
        db.close()

def test_relationships():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏"""
    print("\n\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ –ú–û–î–ï–õ–Ø–ú–ò")
    print("=" * 50)
    
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user = User(email="test@test.com", password_hash="test", name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        db.add(user)
        db.commit()
        db.refresh(user)
        
        template = TableTemplate(name="–¢–µ—Å—Ç —Å–≤—è–∑–∏", created_by=user.id)
        db.add(template)
        db.commit()
        db.refresh(template)
        
        column = TableColumn(
            table_template_id=template.id,
            name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞",
            column_key="test_field",
            data_type="text"
        )
        db.add(column)
        db.commit()
        
        record = TableRecord(
            table_template_id=template.id,
            data={"test_field": "—Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"},
            created_by=user.id,
            updated_by=user.id
        )
        db.add(record)
        db.commit()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–ï–°–¢ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –®–∞–±–ª–æ–Ω—ã
        print("\nüìã –¢–ï–°–¢ 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ -> –®–ê–ë–õ–û–ù–´")
        user_with_templates = db.query(User).options(
            joinedload(User.created_templates)
        ).filter(User.id == user.id).first()
        
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_with_templates.name}")
        print(f"–°–æ–∑–¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {len(user_with_templates.created_templates)}")
        for tpl in user_with_templates.created_templates:
            print(f"  - {tpl.name}")
        
        # –¢–ï–°–¢ 2: –®–∞–±–ª–æ–Ω -> –ö–æ–ª–æ–Ω–∫–∏
        print("\nüìã –¢–ï–°–¢ 2: –®–ê–ë–õ–û–ù -> –ö–û–õ–û–ù–ö–ò")
        template_with_columns = db.query(TableTemplate).options(
            joinedload(TableTemplate.columns)
        ).filter(TableTemplate.id == template.id).first()
        
        print(f"–®–∞–±–ª–æ–Ω: {template_with_columns.name}")
        print(f"–ö–æ–ª–æ–Ω–∫–∏: {len(template_with_columns.columns)}")
        for col in template_with_columns.columns:
            print(f"  - {col.name} ({col.data_type})")
        
        # –¢–ï–°–¢ 3: –®–∞–±–ª–æ–Ω -> –ó–∞–ø–∏—Å–∏
        print("\nüìã –¢–ï–°–¢ 3: –®–ê–ë–õ–û–ù -> –ó–ê–ü–ò–°–ò")
        template_with_records = db.query(TableTemplate).options(
            joinedload(TableTemplate.records)
        ).filter(TableTemplate.id == template.id).first()
        
        print(f"–®–∞–±–ª–æ–Ω: {template_with_records.name}")
        print(f"–ó–∞–ø–∏—Å–∏: {len(template_with_records.records)}")
        for rec in template_with_records.records:
            print(f"  - –î–∞–Ω–Ω—ã–µ: {rec.data}")
        
        # –¢–ï–°–¢ 4: –ó–∞–ø–∏—Å—å -> –°–æ–∑–¥–∞—Ç–µ–ª—å
        print("\nüìã –¢–ï–°–¢ 4: –ó–ê–ü–ò–°–¨ -> –°–û–ó–î–ê–¢–ï–õ–¨")
        record_with_creator = db.query(TableRecord).options(
            joinedload(TableRecord.creator_user)
        ).filter(TableRecord.id == record.id).first()
        
        print(f"–ó–∞–ø–∏—Å—å ID: {record_with_creator.id}")
        print(f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {record_with_creator.creator_user.name}")
        
        # –¢–ï–°–¢ 5: –ö–æ–ª–æ–Ω–∫–∞ -> –®–∞–±–ª–æ–Ω
        print("\nüìã –¢–ï–°–¢ 5: –ö–û–õ–û–ù–ö–ê -> –®–ê–ë–õ–û–ù")
        column_with_template = db.query(TableColumn).options(
            joinedload(TableColumn.table_template)
        ).filter(TableColumn.id == column.id).first()
        
        print(f"–ö–æ–ª–æ–Ω–∫–∞: {column_with_template.name}")
        print(f"–®–∞–±–ª–æ–Ω: {column_with_template.table_template.name}")
        
        print("\n‚úÖ –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ú–û–î–ï–õ–Ø–ú–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–≤—è–∑–µ–π: {e}")
        db.rollback()
    finally:
        db.close()

def test_json_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å JSON –ø–æ–ª—è–º–∏"""
    print("\n\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï JSON –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 50)
    
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user = User(email="json@test.com", password_hash="json", name="JSON –¢–µ—Å—Ç–µ—Ä")
        db.add(user)
        db.commit()
        db.refresh(user)
        
        template = TableTemplate(name="JSON –¢–µ—Å—Ç", created_by=user.id)
        db.add(template)
        db.commit()
        db.refresh(template)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
        records = [
            TableRecord(
                table_template_id=template.id,
                data={
                    "text_field": "–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
                    "number_field": 123.45,
                    "boolean_field": True,
                    "array_field": ["–∑–Ω–∞—á–µ–Ω–∏–µ1", "–∑–Ω–∞—á–µ–Ω–∏–µ2"],
                    "object_field": {"nested": "–≤–ª–æ–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"}
                },
                created_by=user.id,
                updated_by=user.id
            ),
            TableRecord(
                table_template_id=template.id,
                data={
                    "text_field": "–¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç", 
                    "number_field": 678.90,
                    "boolean_field": False,
                    "array_field": ["–∑–Ω–∞—á–µ–Ω–∏–µ3"],
                    "object_field": {"nested": "–¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"}
                },
                created_by=user.id,
                updated_by=user.id
            )
        ]
        
        db.add_all(records)
        db.commit()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ JSON –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é
        print("\nüìã –¢–ï–°–¢ 1: –ü–û–ò–°–ö –ü–û –¢–ï–ö–°–¢–£")
        text_results = db.query(TableRecord).filter(
            TableRecord.data["text_field"].astext == "–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
        ).all()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(text_results)}")
        
        # –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ —Å LIKE
        print("\nüìã –¢–ï–°–¢ 2: –ü–û–ò–°–ö –° LIKE")
        like_results = db.query(TableRecord).filter(
            TableRecord.data["text_field"].astext.ilike("%—Ç–µ–∫—Å—Ç%")
        ).all()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å '—Ç–µ–∫—Å—Ç': {len(like_results)}")
        
        # –¢–ï–°–¢ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á–∏—Å–ª–∞–º
        print("\nüìã –¢–ï–°–¢ 3: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ß–ò–°–õ–ê–ú")
        number_results = db.query(TableRecord).filter(
            TableRecord.data["number_field"].astext.cast(Integer) > 200
        ).all()
        print(f"–ó–∞–ø–∏—Å–µ–π —Å number_field > 200: {len(number_results)}")
        
        # –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
        print("\nüìã –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø")
        has_field = db.query(TableRecord).filter(
            TableRecord.data.has_key("boolean_field")
        ).count()
        print(f"–ó–∞–ø–∏—Å–µ–π —Å –ø–æ–ª–µ–º 'boolean_field': {has_field}")
        
        # –¢–ï–°–¢ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON
        print("\nüìã –¢–ï–°–¢ 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï JSON")
        record_to_update = records[0]
        original_data = record_to_update.data.copy()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π
        record_to_update.data["text_field"] = "–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢"
        record_to_update.data["new_field"] = "–Ω–æ–≤–æ–µ –ø–æ–ª–µ"
        db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updated_record = db.query(TableRecord).filter(TableRecord.id == record_to_update.id).first()
        print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {original_data}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {updated_record.data}")
        
        print("\n‚úÖ JSON –û–ü–ï–†–ê–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ç–µ—Å—Ç–∞—Ö: {e}")
        db.rollback()
    finally:
        db.close()

def test_complex_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    print("\n\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–û–ñ–ù–´–• –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)
    
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        users = [
            User(email="user1@test.com", password_hash="pass1", name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1"),
            User(email="user2@test.com", password_hash="pass2", name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2"),
        ]
        db.add_all(users)
        db.commit()
        for user in users:
            db.refresh(user)
        
        templates = [
            TableTemplate(name="–ü—Ä–æ–µ–∫—Ç—ã", created_by=users[0].id),
            TableTemplate(name="–ó–∞–¥–∞—á–∏", created_by=users[1].id),
        ]
        db.add_all(templates)
        db.commit()
        for template in templates:
            db.refresh(template)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        records = []
        for i in range(10):
            template_id = templates[0].id if i % 2 == 0 else templates[1].id
            user_id = users[0].id if i < 7 else users[1].id
            
            records.append(TableRecord(
                table_template_id=template_id,
                data={
                    "name": f"–ó–∞–ø–∏—Å—å {i+1}",
                    "value": i * 100,
                    "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è A" if i % 3 == 0 else "–∫–∞—Ç–µ–≥–æ—Ä–∏—è B"
                },
                created_by=user_id,
                updated_by=user_id
            ))
        
        db.add_all(records)
        db.commit()
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –ó–ê–ü–†–û–° 1: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        print("\nüìà –ó–ê–ü–†–û–° 1: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        from sqlalchemy import func
        
        user_stats = db.query(
            User.name,
            func.count(TableRecord.id).label('records_count')
        ).join(TableRecord, User.id == TableRecord.created_by)\
         .group_by(User.id, User.name)\
         .all()
        
        for stat in user_stats:
            print(f"   {stat.name}: {stat.records_count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ó–ê–ü–†–û–° 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
        print("\nüìà –ó–ê–ü–†–û–° 2: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –®–ê–ë–õ–û–ù–û–í")
        template_stats = db.query(
            TableTemplate.name,
            func.count(TableRecord.id).label('records_count')
        ).join(TableRecord, TableTemplate.id == TableRecord.table_template_id)\
         .group_by(TableTemplate.id, TableTemplate.name)\
         .all()
        
        for stat in template_stats:
            print(f"   {stat.name}: {stat.records_count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ó–ê–ü–†–û–° 3: –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        print("\nüìà –ó–ê–ü–†–û–° 3: –°–ê–ú–´–ï –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        active_users = db.query(
            User.name,
            func.count(TableRecord.id).label('created_count')
        ).join(TableRecord, User.id == TableRecord.created_by)\
         .group_by(User.id, User.name)\
         .order_by(func.count(TableRecord.id).desc())\
         .limit(5)\
         .all()
        
        for i, user in enumerate(active_users, 1):
            print(f"   {i}. {user.name}: {user.created_count} –∑–∞–ø–∏—Å–µ–π")
        
        print("\n‚úÖ –°–õ–û–ñ–ù–´–ï –ó–ê–ü–†–û–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö: {e}")
        db.rollback()
    finally:
        db.close()

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –ú–û–î–ï–õ–ï–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –û—á–∏—â–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –∑–∞–Ω–æ–≤–æ
    clear_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_basic_operations()
    test_relationships() 
    test_json_operations()
    test_complex_queries()
    
    print("\n" + "=" * 60)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´!")
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    db = SessionLocal()
    try:
        users_count = db.query(User).count()
        templates_count = db.query(TableTemplate).count()
        columns_count = db.query(TableColumn).count()
        records_count = db.query(TableRecord).count()
        
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        print(f"   üìä –®–∞–±–ª–æ–Ω—ã: {templates_count}")
        print(f"   üóÇ –ö–æ–ª–æ–Ω–∫–∏: {columns_count}") 
        print(f"   üìù –ó–∞–ø–∏—Å–∏: {records_count}")
        print(f"   üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: test.db")
    finally:
        db.close()

if __name__ == "__main__":
    run_all_tests()